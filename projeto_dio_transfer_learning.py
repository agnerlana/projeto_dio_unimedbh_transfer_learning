# -*- coding: utf-8 -*-
"""projeto_dio_transfer_learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10jwk_ndfl33ynpS_JM9GUEDNU6IYjMGU

## **Projeto Transfer Learning - Bootcamp DIO Ciência de Dados Unimed-BH**

Este projeto tem por objetivo demonstrar a utilização de um algoritmo de transfer learning para classificar imagens a partir de uma quantidade relativamente baixa de amostras de treino. Em resumo, o transfer learning refere-se ao processo de aprimorar o conhecimento adquirido em um modelo para treinar outros modelos.

O projeto elaborado tem como referência o seguinte script:

https://colab.research.google.com/github/kylemath/ml4a-guides/blob/master/notebooks/transfer-learning.ipynb#scrollTo=92mQ2gMlYoZl

Para este projeto foi utilizada uma base de dados com imagens de cães e gatos, a qual encontra-se disponível em:

https://www.microsoft.com/en-us/download/details.aspx?id=54765
"""

# Commented out IPython magic to ensure Python compatibility.
#Importando pacotes
# %matplotlib inline


#if using Theano with GPU
#os.environ["KERAS_BACKEND"] = "tensorflow"

import os
import random
import numpy as np
import tensorflow as tf
import keras

import matplotlib.pyplot as plt
from matplotlib.pyplot import imshow

from keras.preprocessing import image
from keras.applications.imagenet_utils import preprocess_input
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Activation
from keras.layers import Conv2D, MaxPooling2D
from keras.models import Model

## Acessando Google Drive para importacao das bases de dados
from google.colab import drive
drive.mount('/content/drive')

"""Carregando a base de dados Cats and Dogs"""

# Definindo o diretório com as bases de dados e determinando os parâmetros de treino

root = '/content/drive/MyDrive/Bootcamp_DIO_Unimed-BH/PetImages/'
train_split, val_split = 0.7, 0.15

categories = [x[0] for x in os.walk(root) if x[0]][1:]

print(categories)

"""A função abaixo é utilizada para pre-processar os dados em uma imagem e inserir um vetor"""

def get_image(path):
    img = tf.keras.utils.load_img(path, target_size=(224, 224))
    x = tf.keras.utils.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)
    return img, x

"""Carregando todas as imagens do diretório"""

data = []
for c, category in enumerate(categories):
    images = [os.path.join(dp, f) for dp, dn, filenames 
              in os.walk(category) for f in filenames 
              if os.path.splitext(f)[1].lower() in ['.jpg','.png','.jpeg']]
    for img_path in images:
        img, x = get_image(img_path)
        data.append({'x':np.array(x[0]), 'y':c})

# Contabilizando o número de classes (neste caso 2: cães e gatos)
num_classes = len(categories)

"""Randomizando a ordem dos dados"""

random.shuffle(data)

"""Criando training / validation / test split (70%, 15%, 15%)"""

idx_val = int(train_split * len(data))
idx_test = int((train_split + val_split) * len(data))
train = data[:idx_val]
val = data[idx_val:idx_test]
test = data[idx_test:]

"""Separando os dados para definir os labels (categorias)"""

x_train, y_train = np.array([t["x"] for t in train]), [t["y"] for t in train]
x_val, y_val = np.array([t["x"] for t in val]), [t["y"] for t in val]
x_test, y_test = np.array([t["x"] for t in test]), [t["y"] for t in test]
print(y_test)

"""Normalizando os dados (float32) entre 0 e 1"""

# Normalizando dados
x_train = x_train.astype('float32') / 255.
x_val = x_val.astype('float32') / 255.
x_test = x_test.astype('float32') / 255.

# Convertendo labels para vetores (one-hot)
y_train = keras.utils.to_categorical(y_train, num_classes)
y_val = keras.utils.to_categorical(y_val, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)
print(y_test.shape)

"""Avaliando o resumo do que foi elaborado até aqui."""

# summary
print("finished loading %d images from %d categories"%(len(data), num_classes))
print("train / validation / test split: %d, %d, %d"%(len(x_train), len(x_val), len(x_test)))
print("training data shape: ", x_train.shape)
print("training labels shape: ", y_train.shape)

"""Se tudo funcionou devidamente, as imagens foram carregadas e divididas em três amostras: treino, validação e teste. A amostra de treino deve ter o formato (n, 224, 224, 3), onde n é o tamanho do grupo de teste (neste caso 3498 imagens). Na saída 'training labels shape' é possível verificar que estas 3498 imagens estão divididas em 2 categorias.

Consultando uma pequena amostra da base de dados.
"""

images = [os.path.join(dp, f) for dp, dn, filenames in os.walk(root) for f in filenames if os.path.splitext(f)[1].lower() in ['.jpg','.png','.jpeg']]
idx = [int(len(images) * random.random()) for i in range(8)]
imgs = [tf.keras.utils.load_img(images[i], target_size=(224, 224)) for i in idx]
concat_image = np.concatenate([np.asarray(img) for img in imgs], axis=1)
plt.figure(figsize=(16,4))
plt.imshow(concat_image)

"""### **Treinando uma rede neural**

Antes de realizar o 'transfer learning', vamos construir uma rede neural para classificar nossa base de dados. Este procedimento fornece uma referência para comparar com nossa rede 'transfer-learned' posteriormente.

"""

# build the network
model = Sequential()
print("Input dimensions: ",x_train.shape[1:])

model.add(Conv2D(32, (3, 3), input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Dropout(0.25))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(256))
model.add(Activation('relu'))

model.add(Dropout(0.5))

model.add(Dense(num_classes))
model.add(Activation('softmax'))

model.summary()

"""Como observado na saída, foi criada uma rede com aproximadamente 1.2 milhões de parâmetros. A partir disso, foi possível seguir com o treinamento do nosso modelo para 6 'epochs' com um tamanho de lote de 128, salvando o histórico para plotar a perda ao longo do tempo.

"""

# Compile the model to use categorical cross-entropy loss function and adadelta optimizer
model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

history = model.fit(x_train, y_train,
                    batch_size=128,
                    epochs=6,
                    validation_data=(x_val, y_val))

"""Plotando a validação das perdas e da acurácia ao longo do tempo."""

fig = plt.figure(figsize=(16,4))
ax = fig.add_subplot(121)
ax.plot(history.history["val_loss"])
ax.set_title("validation loss")
ax.set_xlabel("epochs")

ax2 = fig.add_subplot(122)
ax2.plot(history.history["val_accuracy"])
ax2.set_title("validation accuracy")
ax2.set_xlabel("epochs")
ax2.set_ylim(0, 1)

plt.show()

loss, accuracy = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', loss)
print('Test accuracy:', accuracy)

"""### **Realizando o transfer learning a partir de uma rede existente**

Agora podemos seguir com o objetivo de treinar um classificador de imagens em nossa base de dados utilizando uma maior e já treinada rede neural.

"""

vgg = keras.applications.VGG16(weights='imagenet', include_top=True)
vgg.summary()

# make a reference to VGG's input layer
inp = vgg.input

# make a new softmax layer with num_classes neurons
new_classification_layer = Dense(num_classes, activation='softmax')

# connect our new layer to the second to last layer in VGG, and make a reference to it
out = new_classification_layer(vgg.layers[-2].output)

# create a new network between inp and out
model_new = Model(inp, out)

# make all layers untrainable by freezing weights (except for last layer)
for l, layer in enumerate(model_new.layers[:-1]):
    layer.trainable = False

# ensure the last layer is trainable/not frozen
for l, layer in enumerate(model_new.layers[-1:]):
    layer.trainable = True

model_new.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

model_new.summary()

history2 = model_new.fit(x_train, y_train, 
                         batch_size=128, 
                         epochs=2, 
                         validation_data=(x_val, y_val))

"""A acurácia da validação foi de aproximadamente 88%, sendo 16% superior à rede treinada originalmente.

Vamos plotar abaixo a validação da perda e da acurácia novamente, desta vez comparando o modelo treinado original (em azul) com o novo modelo transfer-learned (em laranja).

Obs.: Devido ao limite de memória do Colab, foram utilizadas somente 2 epochs no modelo transfer-learned
"""

fig = plt.figure(figsize=(16,4))
ax = fig.add_subplot(121)
ax.plot(history.history["val_loss"])
ax.plot(history2.history["val_loss"])
ax.set_title("validation loss")
ax.set_xlabel("epochs")

ax2 = fig.add_subplot(122)
ax2.plot(history.history["val_accuracy"])
ax2.plot(history2.history["val_accuracy"])
ax2.set_title("validation accuracy")
ax2.set_xlabel("epochs")
ax2.set_ylim(0, 1)

plt.show()

"""Novamente, realizamos uma validação final da amostra de teste."""

loss, accuracy = model_new.evaluate(x_test, y_test, verbose=0)

print('Test loss:', loss)
print('Test accuracy:', accuracy)